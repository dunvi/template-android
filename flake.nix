{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    flake-parts.url = "github:hercules-ci/flake-parts";
  };

  outputs = inputs@{ self, nixpkgs, flake-parts, ... }:
  let
    platformVersion = "36";
    cliToolsVersion = "latest";
    ndkVersion = "28.2.13676358";
  in
    flake-parts.lib.mkFlake { inherit inputs; } {
      systems = ["x86_64-linux"];

      perSystem = { config, system, pkgs, ... }:
      let
        base = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true;
            android_sdk.accept_license = true;
          };
        };

        androidenv =
          base.androidenv;

        androidBundle = androidenv.composeAndroidPackages {
          platformVersions = [ platformVersion ];
          cmdLineToolsVersion = cliToolsVersion;
          ndkVersions = [ ndkVersion ];
          includeEmulator = true;
          includeSystemImages = true;
          includeSources = true;
          includeNDK = true;
        };

        android-studio-full = base.android-studio.withSdk androidBundle.androidsdk;
        sdkRoot = "${androidBundle.androidsdk}/libexec/android-sdk";
        ndkRoot = "${sdkRoot}/ndk/${ndkVersion}";

        pkgs' = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true;
            android_sdk.accept_license = true;
          };

          # Overlay in our chosen androidenv
          overlays = [
            (final: prev: {
              inherit androidenv android-studio-full;
            })
          ];
        };

        lib = pkgs'.lib // builtins;
      in
      {
        devShells.default = pkgs'.mkShell {
          name = "template-android";

          imports = [] ++
          lib.optional
            (builtins.pathExists ./devenv.local.nix)
            ./devenv.local.nix;

          buildInputs = [
            androidBundle.androidsdk
            androidBundle.platform-tools
            android-studio-full
            pkgs'.jdk
          ];

          ANDROID_HOME="${sdkRoot}";
          ANDROID_SDK_ROOT="${sdkRoot}";
          ANDROID_NDK_ROOT="${ndkRoot}";
          JAVA_HOME="${pkgs'.jdk}";

          shellHook = ''
            echo "welcome to android world, still in progress"

            echo "ANDROID_HOME=$ANDROID_HOME"
            echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
            echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"

            export GRADLE_OPTS="-Dorg.gradle.project.android.aapt2FromMavenOverride=$(echo "$ANDROID_SDK_ROOT/build-tools/"*"/aapt2")"

            # Add cmake to the path.
            cmake_root="$(echo "$ANDROID_SDK_ROOT/cmake/"*/)"
            export PATH="$cmake_root/bin:$PATH"

            # Write out local.properties for Android Studio.
            cat <<EOF > local.properties
            # This file was automatically generated by nix-shell.
            sdk.dir=$ANDROID_SDK_ROOT
            ndk.dir=$ANDROID_NDK_ROOT
            cmake.dir=$cmake_root
            EOF

            # we want to make sure adb is running, and this is an easy way to do so
            # but it seems to fuck up the terminal if it triggers it to start
            #adb devices
          '';
        };
      };
    };
}
